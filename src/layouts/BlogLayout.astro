---
import TOCHeading from "../components/TOCHeading.astro";
import {type HierarchicalHeading} from "../ts/HierarchicalHeading.ts";
import { marked } from 'marked';
import Layout from "./Layout.astro";

interface Heading {
    slug: string,
    text: string,
    depth: number,
}

export interface Props {
    headings: Heading[]
    id: string,
    data: {
        authors: string[],
        reviewers: string[],
        description: string,
        draft: boolean,
        title: string,
        pubDate: Date,
        time?: string,
    }
}

const {
    data: {authors, description, reviewers = [], draft=false, title, pubDate, time},
    headings,
    id
} = Astro.props;

const maxDepth = 2;

function parseHeadings(headings: Heading[], depth: number): HierarchicalHeading[] {
    if (headings.length == 0) {
        return [];
    }

    const result: HierarchicalHeading[] = [];
    let acc: Heading[] = [];

    for (const heading of headings) {
        if (heading.depth > maxDepth) {
            continue;
        }

        if (heading.depth > depth) {
            acc.push(heading);
        } else if (heading.depth == depth) {
            if (acc.length != 0) {
                result[result.length - 1].children = parseHeadings(acc, depth + 1);
                acc = [];
            }
            result.push({
                slug: heading.slug,
                text: heading.text,
                children: [],
            })
        } else if (heading.depth < depth) {
            throw new Error("bad heading hierarchy")
        }
    }

    if (acc.length != 0) {
        result[result.length - 1].children = parseHeadings(acc, depth + 1);
    }

    return result;
}

headings.splice(0, 0, {
    slug: "title",
    text: title,
    depth: 1,
})
const hierarchicalHeadings = headings.length == 0? []: headings[0].depth == 1? parseHeadings(headings, 1): (() => {throw new Error("bad heading hierarchy (should start with h1)")})();

---
<Layout title={`${title}`}>
    <Fragment slot="head">
        <meta name="description" content={description} />
        <style>
            div.authors {
                display: flex;
                flex-direction: column;
                align-items: center;
            }

            a.author {
                display: inline-flex;
                align-items: center;
                margin-right: 1em;

                color: #212529;
                box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;

                padding: 0.3em;
                border-radius: 0.3em;
                text-decoration: none;
            }

            a.author:last-child {
                margin-right: 0;
            }
        </style>
    </Fragment>
    <Fragment slot="extra-nav">
      <a href={`https://github.com/jdonszelmann/homepage/tree/main/src/content/blog/${id}`}>Article Source</a>

        By:
        <div class="authors">
            {
                authors.map((author: any) => (
                    <a class="author" href=`https://github.com/${author}`>
                        <img
                            alt={`${author}'s github avatar`}
                            class="gh-avatar"
                            src={`https://github.com/${author}.png`}
                        />
                        {author}
                    </a>
                ))
            }
        </div>
        {reviewers.length > 0 && (
            <div class="reviewers">
            Reviewed by:
            <div class="authors">
                {
                    reviewers.map((author: any) => (
                        <a class="author" href=`https://github.com/${author}`>
                            <img
                                alt={`${author}'s github avatar`}
                                class="gh-avatar"
                                src={`https://github.com/${author}.png`}
                            />
                            {author}
                        </a>
                    ))
                    }
            </div>


        Published: {pubDate.toISOString().slice(0,10)}<br>
            {time?`read time: ${time}`:""}
        </div>
        )}

        <div class="toc">
            <TOCHeading elems={hierarchicalHeadings}>
        </div>
    </Fragment>
    <Fragment slot="main">
        <h1 id="title" class="title"}>{title}
            {draft && (<span>(Draft)</span>)}
        </h1>
        <p set:html={marked.parse(description || "")} />
        <slot />
    </Fragment>
</Layout>
