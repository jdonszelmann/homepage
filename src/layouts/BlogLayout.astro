---
import TOCHeading from "../components/TOCHeading.astro";
import GithubUser from "../components/GithubUser.astro";
import Tag from "../components/Tag.astro";
import { type HierarchicalHeading } from "../ts/HierarchicalHeading.ts";
import { marked } from "marked";
import Layout from "./Layout.astro";

interface Heading {
    slug: string;
    text: string;
    depth: number;
}

export interface Props {
    headings: Heading[];
    id: string;
    data: {
        authors: string[];
        reviewers: string[];
        description: string;
        draft: boolean;
        title: string;
        pubDate: Date;
        time?: string;
        tags: string[];
    };
}

const {
    data: {
        authors,
        description,
        reviewers = [],
        draft = false,
        title,
        pubDate,
        time,
        tags,
    },
    headings,
    id,
} = Astro.props;

const maxDepth = 2;

function parseHeadings(
    headings: Heading[],
    depth: number,
): HierarchicalHeading[] {
    if (headings.length == 0) {
        return [];
    }

    const result: HierarchicalHeading[] = [];
    let acc: Heading[] = [];

    for (const heading of headings) {
        if (heading.depth > maxDepth) {
            continue;
        }

        if (heading.depth > depth) {
            acc.push(heading);
        } else if (heading.depth == depth) {
            if (acc.length != 0) {
                result[result.length - 1].children = parseHeadings(
                    acc,
                    depth + 1,
                );
                acc = [];
            }
            result.push({
                slug: heading.slug,
                text: heading.text,
                children: [],
            });
        } else if (heading.depth < depth) {
            throw new Error("bad heading hierarchy");
        }
    }

    if (acc.length != 0) {
        result[result.length - 1].children = parseHeadings(acc, depth + 1);
    }

    return result;
}

headings.splice(0, 0, {
    slug: "title",
    text: title,
    depth: 1,
});
const hierarchicalHeadings =
    headings.length == 0
        ? []
        : headings[0].depth == 1
          ? parseHeadings(headings, 1)
          : (() => {
                throw new Error("bad heading hierarchy (should start with h1)");
            })();
---

<Layout title={`${title}`}>
    <Fragment slot="head">
        <meta name="description" content={description} />
        <style is:global>
            .authors,
            .author-info {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 1em;
            }

            a.author {
                display: inline-flex;
                align-items: center;
                margin-right: 1em;

                color: #212529;
                box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;

                padding: 0.3em;
                border-radius: 0.3em;
                text-decoration: none;
                box-sizing: border-box;
            }

            .reviewers {
                display: contents;
            }

            @media (width <= 900px) {
                .author-info.main {
                    display: none !important;
                }
                .toc.main {
                    display: none;
                }
            }

            @media (width > 900px) {
                .toc {
                    display: contents;
                }

                .toc.below {
                    display: none !important;
                }
                .author-info.below {
                    display: none !important;
                }
            }

            .tags {
                display: flex;
                flex-direction: column;
                gap: 0.5em;
                width: 100%;
            }

            footer {
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;

                margin-top: 2em;
                border-top: 1px solid black;
            }
        </style>
    </Fragment>
    <Fragment slot="menu">
        <a
            href={`https://github.com/jdonszelmann/homepage/tree/main/src/content/blog/${id}`}
            >Source</a
        >
    </Fragment>
    <Fragment slot="nav">
        <div class="author-info main">
            By:
            <div class="authors">
                {
                    authors.map((author: any) => (
                        <GithubUser name={author} large />
                    ))
                }
            </div>
            {
                reviewers.length > 0 && (
                    <Fragment>
                        Reviewed by:
                        <div class="authors">
                            {reviewers.map((reviewer: any) => (
                                <GithubUser name={reviewer} large />
                            ))}
                        </div>
                    </Fragment>
                )
            }

            Published: {pubDate.toISOString().slice(0, 10)}<br />
            {time ? `read time: ${time}` : ""}

            <div class="tags">
                Tags:
                {tags.map((tag: any) => <Tag name={tag} wide />)}
            </div>
        </div>

        <div class="toc main sans">
            <TOCHeading elems={hierarchicalHeadings} />
        </div>
    </Fragment>
    <Fragment slot="main">
        <h1 id="title" class="title" }>
            {title}
            {draft && <span>(Draft)</span>}
        </h1>
        <p set:html={marked.parse(description || "")} />

        <slot />

        <footer>
            <div class="toc below sans">
                <TOCHeading elems={hierarchicalHeadings} />
            </div>
            <div class="author-info below">
                By:
                <div class="authors">
                    {
                        authors.map((author: any) => (
                            <GithubUser name={author} large />
                        ))
                    }
                </div>
                {
                    reviewers.length > 0 && (
                        <Fragment>
                            Reviewed by:
                            <div class="authors">
                                {reviewers.map((reviewer: any) => (
                                    <GithubUser name={reviewer} large />
                                ))}
                            </div>
                        </Fragment>
                    )
                }

                Published: {pubDate.toISOString().slice(0, 10)}<br />
                {time ? `read time: ${time}` : ""}

                <div class="tags">
                    Tags:
                    {tags.map((tag: any) => <Tag name={tag} wide />)}
                </div>
            </div>
        </footer>
    </Fragment>
</Layout>
